-
  3 . Test duplacate invoice with withholding
-
  3.1 Check if invoice was created in previous tests and has a wh document
-
  !assert {model: account.invoice, id: islr_inv01}:
    - id
    - islr_wh_doc_id.id
-
  3.2 Duplicate the invoice from an open invoice
-
  !python {model: account.invoice}: |
    from openerp import netsvc
    default = {'islr_wh_doc_id': 0}
    context =  {'lang': 'en_US', 
                'tz': False, 
                'uid': uid, 
                'journal_type': 'sale', 
                'default_type': 'out_invoice', 
                'type': 'out_invoice'}
    invoice_id = self.copy(cr, uid, ref("islr_inv01"), default=None, context=None)
    assert invoice_id, "Invoice was not duplicated (should)"
    self.write(cr, uid, [invoice_id], 
            {'journal_id': ref("account.expenses_journal"), 
             'nro_ctrl':'DUPLINV00',
               'reference':'110011'})
    acc_brw=self.browse(cr, uid, invoice_id)
    self.button_reset_taxes(cr, uid, [invoice_id])
    # update check total
    self.write(cr, uid, [invoice_id], 
            {'check_total': 16800.0})
    wf = netsvc.LocalService("workflow")
    wf.trg_validate(uid, 'account.invoice', invoice_id, 'invoice_open', cr)
-
  3 . Test duplacate invoice w/o taxes asociated
-
  3.1 Check if invoice was created in previous tests and has a wh document
-
  !assert {model: account.invoice, id: islr_inv03}:
    - id
    - islr_wh_doc_id.id
-
  3.2 Duplicate the invoice from an open invoice
-
  !python {model: account.invoice}: |
    from openerp import netsvc
    default = {'islr_wh_doc_id': 0}
    context =  {'lang': 'en_US', 
                'tz': False, 
                'uid': uid, 
                'journal_type': 'purchase', 
                'default_type': 'out_invoice', 
                'type': 'out_invoice'}
    invoice_id = self.copy(cr, uid, ref("islr_inv03"), default=None, context=None)
    assert invoice_id, "Invoice was not duplicated (should)"
    self.write(cr, uid, [invoice_id], 
            {'journal_id': ref("account.expenses_journal"), 
             'nro_ctrl':'DUPLINV00NOTAX',
               'reference':'110011NOTAX'})
    acc_brw=self.browse(cr, uid, invoice_id)
    self.button_reset_taxes(cr, uid, [invoice_id])
    # update check total
    self.write(cr, uid, [invoice_id], 
            {'check_total': 16800.0})
    wf = netsvc.LocalService("workflow")
    wf.trg_validate(uid, 'account.invoice', invoice_id, 'invoice_open', cr)

    

    
