-
  3. Testing Customer Withholding documents generated manually (sale).
-
  3.1 Checking and configuring the elements needed.
-
  Check if the journal is of sale type.
-
    !assert {model: account.journal, id: account.sales_journal, string: The journal is not of sale type}:
        - type == 'sale'
-
  Check if the account is of type receivable.
-
    !assert {model: account.account, id: account.a_recv, string: The account is not of receivable type}:
        - type == 'receivable'
-
  Customer A is withholding agent.
-
    !assert {model: res.partner, id: l10n_ve_fiscal_requirements.f_req_partner_1, string: Customer A is not a withholding agent}:
        - wh_iva_agent
-
  Customer B is not withholding agent.
-
    !assert {model: res.partner, id: l10n_ve_fiscal_requirements.f_req_partner_7, string: Customer B is a withholding agent}:
        - wh_iva_agent == False
-
  Tax A is a withholdeable Tax.
-
    !assert {model: account.tax, id: l10n_ve_fiscal_requirements.iva_sale1, string: The tax is not withholdeable}:
        - ret
-
  Tax B is not a withholdeable Tax
-
    !assert {model: account.tax, id: l10n_ve_fiscal_requirements.iva_sale3, string: The tax is withholdeable}:
        - ret == False
-
  Setting the context that will be used for the encoding of all the withholding documents
-
  !context
    'type': 'out_invoice'
-
  3.2 Test customer withholding with a Non-wh Partner.
-
  Create a customer withholding with Non-wh Partner. THIS CASE WILL FAIL ALWAYS...
  Can not create a AWI doc with a Non-wh Partner, need to use a Wh Partner.
  That is the reason why this test is commented.
  You need to descomment this test to run it and will raise an yaml ERROR and a server exception.
#~ -
    #~ !record {model: account.wh.iva, id: awi_sale_X0X, view: l10n_ve_withholding_iva.view_wh_iva_form_customer}: &awi_sale_X0X
        #~ number: AWI SALE X0X
        #~ name: AWI SALE X0X
        #~ partner_id: l10n_ve_fiscal_requirements.f_req_partner_7
        #~ account_id: account.a_recv
        #~ journal_id: account.sales_journal
        #~ company_id: base.main_company
        #~ currency_id: base.EUR
-
  Create a customer withholding with a wh partner to later try to update to a Non-wh Partner.
-
    !record {model: account.wh.iva, id: awi_sale_X1X, view: l10n_ve_withholding_iva.view_wh_iva_form_customer}: &awi_sale_X1X
        number: AWI SALE X1X
        name: AWI SALE X1X
        partner_id: l10n_ve_fiscal_requirements.f_req_partner_1
        account_id: account.a_recv
        journal_id: account.sales_journal
        company_id: base.main_company
        currency_id: base.EUR
-
  Try to update the customer withholding partner to a non-wh partner, the AWI doc will not be updated because the constraint.
-
    !python {model: account.wh.iva}: |
        awi_id = ref('awi_sale_X1X')
        try:
            write_flag = self.write(cr, uid, awi_id,
                {partner_id:
                 ref('l10n_ve_fiscal_requirements.f_req_partner_7')})
        except Exception as e:
            write_flag = -1
            pass
        assert write_flag == -1 or not at_id, 'The AWI document should not be updated because its partner is a Non-wh Partner and it requires a Wh Partner.'

-
  3.3 Test customer withholding when the company is not a withholding agent.
-
  Set the company partner as a non-withholding agent.
-
    !record {model: res.partner, id: base.main_partner}:
        wh_iva_agent: False
-
  Checking that the Company partner is not withholding agent.
-
    !assert {model: res.partner, id: base.main_partner, string: The Company is a withholding agent}:
        - not wh_iva_agent
-
  Skip Case 000 (Non-wh Company, Non-wh Partner, Non-ret Tax). No valid case.
-
  Skip Case 001 (Non-wh Company, Non-wh Partner, Ret Tax). No valid case.
-
  Skip Case 00N (Non-wh Company, Non-wh Partner, No Tax). No valid case.
-
  Case 010 (Non-wh Company, Wh Partner, Non-ret Tax).
-
  Create a customer withholding with the 010 case conditions.
-
    !record {model: account.wh.iva, id: awi_sale_010, view: l10n_ve_withholding_iva.view_wh_iva_form_customer}: &awi_sale_010
        number: AWI SALE 010
        name: AWI SALE 010
        <<: *awi_sale_X1X
-
  I check that the customer withholding is in draft state.
-
  !assert {model: account.wh.iva, id: awi_sale_010, string: the withholding iva is not in draft state. It needs to be in draft stata when is just created}:
    - state == 'draft'
-
  I check that the customer withholding is out_invoice type.
-
  !assert {model: account.wh.iva, id: awi_sale_010, string: Not the intended type. It should be 'out_invoice'}:
    - type == 'out_invoice'
-
  Search current period and attach to the withholding iva doc.
-
  !python {model: account.wh.iva}: |
    import time
    awi_id = ref("awi_sale_010")
    company_id = ref('base.main_company')
    period_obj = self.pool.get('account.period')
    period = period_obj.find(
        cr, uid, time.strftime('%Y/%m/%d'), {'company_id': company_id})
    assert period, 'There aren\'t periods for this date'
    self.write(cr, uid, awi_id, {'period_id':period[0]})
-
  Create an invoice that will be use in the withholding doc.
-
    !record {model: account.invoice, id: awi_sale_invoice_010, view: account.invoice_form}: &awi_sale_invoice_010
        nro_ctrl: 010-INV-AWI-SALE
        partner_id: l10n_ve_fiscal_requirements.f_req_partner_1
        date_invoice: !eval time.strftime('%Y-%m-%d')
        company_id: base.main_company
        account_id: account.a_sale
        journal_id: account.sales_journal
        currency_id: base.EUR
        reference_type: none
        invoice_line: &invoice_line_010
          - product_id: product.product_product_4
            quantity: 3
            uos_id: product.product_uom_unit
            price_unit: 3
            name: 000-AWI-SALE
            account_id: account.a_sale
            invoice_line_tax_id:
            - l10n_ve_fiscal_requirements.iva_sale3
-
  Check that the invoice's type is sale (out_invoice).
-
    !assert {model: account.invoice, id: awi_sale_invoice_010, string: The invoice is not an out_invoice}:
        - type == 'out_invoice'
-
  Add a withholding line (invoice) to the withholding iva doc.
-
  !python {model: account.wh.iva}: |
    awi_id = ref('awi_sale_010')
    invoice_id = ref('awi_sale_invoice_010')
    values = {}
    awi_brw = self.browse(cr, uid, awi_id)
    res = self.onchange_partner_id(
        cr, uid, [awi_id], 'out_invoice', awi_brw.partner_id.id)
    values['wh_lines'] = [
        (0, 0, {'invoice_id': invoice_id,
                'name':'N/A',
                'wh_iva_rate': awi_brw.partner_id.wh_iva_rate})]
    values['account_id'] = res['value']['account_id']
    self.write(cr, uid, awi_id, values)
-
  Check that the withholding line was NO added to the wh doc.
-
  !python {model: account.wh.iva}: |
    awi_id = ref('awi_sale_010')
    awi_brw = self.browse(cr, uid, awi_id)
    assert not awi_brw.wh_lines, "This cannot happend because the tax in the invoice is non-ret tax. so the withholding line can be added in first place"
-
  Case 011 (Non-wh Company, Wh Partner, Ret Tax)
-
  Create a customer withholding with the 011 case conditions.
-
    !record {model: account.wh.iva, id: awi_sale_011, view: l10n_ve_withholding_iva.view_wh_iva_form_customer}: &awi_sale_011
        number: AWI SALE 011
        name: AWI SALE 011
        <<: *awi_sale_X1X
-
  I check that the customer withholding is in draft state.
-
  !assert {model: account.wh.iva, id: awi_sale_011, string: the withholding iva is not in draft state. It needs to be in draft stata when is just created}:
    - state == 'draft'
-
  I check that the customer withholding is out_invoice type.
-
  !assert {model: account.wh.iva, id: awi_sale_011, string: Not the intended type. It should be 'out_invoice'}:
    - type == 'out_invoice'
-
  Search current period and attach to the withholding iva doc.
-
  !python {model: account.wh.iva}: |
    import time
    awi_id = ref("awi_sale_011")
    company_id = ref('base.main_company')
    period_obj = self.pool.get('account.period')
    period = period_obj.find(
        cr, uid, time.strftime('%Y/%m/%d'), {'company_id': company_id})
    assert period, 'There aren\'t periods for this date'
    self.write(cr, uid, awi_id, {'period_id':period[0]})
-
  Create an invoice that will be use in the withholding doc.
-
    !record {model: account.invoice, id: awi_sale_invoice_011, view: account.invoice_form}:
        nro_ctrl: 011-INV-AWI-SALE
        invoice_line:
          - name: 011-INV-AWI-SALE
            invoice_line_tax_id:
              - l10n_ve_fiscal_requirements.iva_sale1
            <<: *invoice_line_010
        <<: *awi_sale_invoice_010
-
  Check that the invoice's type is sale (out_invoice).
-
    !assert {model: account.invoice, id: awi_sale_invoice_011, string: The invoice is not an out_invoice}:
        - type == 'out_invoice'
-
  Add a withholding line (invoice) to the withholding iva doc.
-
  !python {model: account.wh.iva}: |
    awi_id = ref('awi_sale_011')
    invoice_id = ref('awi_sale_invoice_011')
    values = {}
    awi_brw = self.browse(cr, uid, awi_id)
    res = self.onchange_partner_id(
        cr, uid, [awi_id], 'out_invoice', awi_brw.partner_id.id)
    values['wh_lines'] = [
        (0, 0, {'invoice_id': invoice_id,
                'name':'N/A',
                'wh_iva_rate': awi_brw.partner_id.wh_iva_rate})]
    values['account_id'] = res['value']['account_id']
    self.write(cr, uid, awi_id, values)
-
  Check that the withholding line was added to the wh doc.
-
  !python {model: account.wh.iva}: |
    awi_id = ref('awi_sale_011')
    awi_brw = self.browse(cr, uid, awi_id)
    assert awi_brw.wh_lines, "A withholding line should be created."
-
  Case 01N (Non-wh Company, Wh Partner, No Tax)
-
  Create a customer withholding with the 01N case conditions.
-
    !record {model: account.wh.iva, id: awi_sale_01N, view: l10n_ve_withholding_iva.view_wh_iva_form_customer}:
        number: AWI SALE 01N
        name: AWI SALE 01N
        <<: *awi_sale_X1X
-
  I check that the customer withholding is in draft state.
-
  !assert {model: account.wh.iva, id: awi_sale_01N, string: the withholding iva is not in draft state. It needs to be in draft stata when is just created}:
    - state == 'draft'
-
  I check that the customer withholding is out_invoice type.
-
  !assert {model: account.wh.iva, id: awi_sale_01N, string: Not the intended type. It should be 'out_invoice'}:
    - type == 'out_invoice'
-
  Search current period and attach to the withholding iva doc.
-
  !python {model: account.wh.iva}: |
    import time
    awi_id = ref("awi_sale_01N")
    company_id = ref('base.main_company')
    period_obj = self.pool.get('account.period')
    period = period_obj.find(
        cr, uid, time.strftime('%Y/%m/%d'), {'company_id': company_id})
    assert period, 'There aren\'t periods for this date'
    self.write(cr, uid, awi_id, {'period_id':period[0]})
-
  Create an invoice for customer A with ret tax that will be added to the withholding document.
-
    !record {model: account.invoice, id: awi_sale_invoice_01N, view: account.invoice_form}:
        nro_ctrl: 01N-INV-AWI-SALE
        invoice_line: &invoice_line_XXN
          - name: 01N-INV-AWI-SALE
            product_id: product.product_product_4
            quantity: 3
            uos_id: product.product_uom_unit
            price_unit: 3
            account_id: account.a_sale
        <<: *awi_sale_invoice_010
-
  Check that the invoice's type is sale (out_invoice).
-
    !assert {model: account.invoice, id: awi_sale_invoice_01N, string: The invoice is not an out_invoice}:
        - type == 'out_invoice'
-
  Add a withholding line (invoice) to the withholding iva doc.
-
  !python {model: account.wh.iva}: |
    awi_id = ref('awi_sale_01N')
    invoice_id = ref('awi_sale_invoice_01N')
    values = {}
    awi_brw = self.browse(cr, uid, awi_id)
    res = self.onchange_partner_id(
        cr, uid, [awi_id], 'out_invoice', awi_brw.partner_id.id)
    values['wh_lines'] = [
        (0, 0, {'invoice_id': invoice_id,
                'name':'N/A',
                'wh_iva_rate': awi_brw.partner_id.wh_iva_rate})]
    values['account_id'] = res['value']['account_id']
    self.write(cr, uid, awi_id, values)
-
  Check that the withholding line was NOT added to the wh doc.
-
  !python {model: account.wh.iva}: |
    awi_id = ref('awi_sale_01N')
    awi_brw = self.browse(cr, uid, awi_id)
    assert not awi_brw.wh_lines, "A withholding line should not be created. because there is not related tax at the invoice"
-
  3.4 Test customer withholding when the company is a withholding agent.
-
  Set the company partner as a withholding agent.
-
    !record {model: res.partner, id: base.main_partner}:
        wh_iva_agent: True
-
  Checking that the Company partner is a withholding agent.
-
    !assert {model: res.partner, id: base.main_partner, string: The Company is not a withholding agent}:
        - wh_iva_agent
-
  Skip Case 100 (Wh Company, Non-wh Partner, Non-ret Tax). No valid case.
-
  Skip Case 101 (Wh Company, Non-wh Partner, Ret Tax). No valid case.
-
  Skip Case 10N (Wh Company, Non-wh Partner, No Tax). No valid case.
-
  Case 110 (Wh Company, Wh Partner, Non-ret Tax)
-
  Create a customer withholding with the 110 case conditions.
-
    !record {model: account.wh.iva, id: awi_sale_110, view: l10n_ve_withholding_iva.view_wh_iva_form_customer}: 
        number: AWI SALE 110
        name: AWI SALE 110
        <<: *awi_sale_010
-
  I check that the customer withholding is in draft state.
-
  !assert {model: account.wh.iva, id: awi_sale_110, string: the withholding iva is not in draft state. It needs to be in draft stata when is just created}:
    - state == 'draft'
-
  I check that the customer withholding is out_invoice type.
-
  !assert {model: account.wh.iva, id: awi_sale_110, string: Not the intended type. It should be 'out_invoice'}:
    - type == 'out_invoice'
-
  Search current period and attach to the withholding iva doc.
-
  !python {model: account.wh.iva}: |
    import time
    awi_id = ref("awi_sale_110")
    company_id = ref('base.main_company')
    period_obj = self.pool.get('account.period')
    period = period_obj.find(
        cr, uid, time.strftime('%Y/%m/%d'), {'company_id': company_id})
    assert period, 'There aren\'t periods for this date'
    self.write(cr, uid, awi_id, {'period_id':period[0]})
-
  Create an invoice that will be use in the withholding doc.
-
    !record {model: account.invoice, id: awi_sale_invoice_110, view: account.invoice_form}:
        nro_ctrl: 110-INV-AWI-SALE
        <<: *awi_sale_invoice_010
-
  Check that the invoice's type is sale (out_invoice).
-
    !assert {model: account.invoice, id: awi_sale_invoice_110, string: The invoice is not an out_invoice}:
        - type == 'out_invoice'
-
  Add a withholding line (invoice) to the withholding iva doc.
-
  !python {model: account.wh.iva}: |
    awi_id = ref('awi_sale_110')
    invoice_id = ref('awi_sale_invoice_110')
    values = {}
    awi_brw = self.browse(cr, uid, awi_id)
    res = self.onchange_partner_id(
        cr, uid, [awi_id], 'out_invoice', awi_brw.partner_id.id)
    values['wh_lines'] = [
        (0, 0, {'invoice_id': invoice_id,
                'name':'N/A',
                'wh_iva_rate': awi_brw.partner_id.wh_iva_rate})]
    values['account_id'] = res['value']['account_id']
    self.write(cr, uid, awi_id, values)
-
  Check that the withholding line was NO added to the wh doc.
-
  !python {model: account.wh.iva}: |
    awi_id = ref('awi_sale_110')
    awi_brw = self.browse(cr, uid, awi_id)
    assert not awi_brw.wh_lines, "This cannot happend because the tax in the invoice is non-ret tax. so the withholding line can be added in first place"

-
  Case 111 (Wh Company, Wh Partner, Ret Tax)
-
  Create a customer withholding with the 111 case conditions.
-
    !record {model: account.wh.iva, id: awi_sale_111, view: l10n_ve_withholding_iva.view_wh_iva_form_customer}:
        number: AWI SALE 111
        name: AWI SALE 111
        <<: *awi_sale_011
-
  I check that the customer withholding is in draft state.
-
  !assert {model: account.wh.iva, id: awi_sale_111, string: the withholding iva is not in draft state. It needs to be in draft stata when is just created}:
    - state == 'draft'
-
  I check that the customer withholding is out_invoice type.
-
  !assert {model: account.wh.iva, id: awi_sale_111, string: Not the intended type. It should be 'out_invoice'}:
    - type == 'out_invoice'
-
  Search current period and attach to the withholding iva doc.
-
  !python {model: account.wh.iva}: |
    import time
    awi_id = ref("awi_sale_111")
    company_id = ref('base.main_company')
    period_obj = self.pool.get('account.period')
    period = period_obj.find(
        cr, uid, time.strftime('%Y/%m/%d'), {'company_id': company_id})
    assert period, 'There aren\'t periods for this date'
    self.write(cr, uid, awi_id, {'period_id':period[0]})
-
  Create an invoice that will be use in the withholding doc.
-
    !record {model: account.invoice, id: awi_sale_invoice_111, view: account.invoice_form}:
        nro_ctrl: 111-INV-AWI-SALE
        invoice_line:
          - name: 111-INV-AWI-SALE
            invoice_line_tax_id:
              - l10n_ve_fiscal_requirements.iva_sale1
            <<: *invoice_line_010
        <<: *awi_sale_invoice_010
-
  Check that the invoice's type is sale (out_invoice).
-
    !assert {model: account.invoice, id: awi_sale_invoice_111, string: The invoice is not an out_invoice}:
        - type == 'out_invoice'
-
  Add a withholding line (invoice) to the withholding iva doc.
-
  !python {model: account.wh.iva}: |
    awi_id = ref('awi_sale_111')
    invoice_id = ref('awi_sale_invoice_111')
    values = {}
    awi_brw = self.browse(cr, uid, awi_id)
    res = self.onchange_partner_id(
        cr, uid, [awi_id], 'out_invoice', awi_brw.partner_id.id)
    values['wh_lines'] = [
        (0, 0, {'invoice_id': invoice_id,
                'name':'N/A',
                'wh_iva_rate': awi_brw.partner_id.wh_iva_rate})]
    values['account_id'] = res['value']['account_id']
    self.write(cr, uid, awi_id, values)
-
  Check that the withholding line was added to the wh doc.
-
  !python {model: account.wh.iva}: |
    awi_id = ref('awi_sale_111')
    awi_brw = self.browse(cr, uid, awi_id)
    assert awi_brw.wh_lines, "A withholding line should be created."

-
  Case 11N (Wh Company, Wh Partner, No Tax)
-
  Create a customer withholding with the 01N case conditions.
-
    !record {model: account.wh.iva, id: awi_sale_11N, view: l10n_ve_withholding_iva.view_wh_iva_form_customer}:
        number: AWI SALE 11N
        name: AWI SALE 11N
        <<: *awi_sale_X1X
-
  I check that the customer withholding is in draft state.
-
  !assert {model: account.wh.iva, id: awi_sale_11N, string: the withholding iva is not in draft state. It needs to be in draft stata when is just created}:
    - state == 'draft'
-
  I check that the customer withholding is out_invoice type.
-
  !assert {model: account.wh.iva, id: awi_sale_11N, string: Not the intended type. It should be 'out_invoice'}:
    - type == 'out_invoice'
-
  Search current period and attach to the withholding iva doc.
-
  !python {model: account.wh.iva}: |
    import time
    awi_id = ref("awi_sale_11N")
    company_id = ref('base.main_company')
    period_obj = self.pool.get('account.period')
    period = period_obj.find(
        cr, uid, time.strftime('%Y/%m/%d'), {'company_id': company_id})
    assert period, 'There aren\'t periods for this date'
    self.write(cr, uid, awi_id, {'period_id':period[0]})
-
  Create an invoice for customer A with ret tax that will be added to the withholding document.
-
    !record {model: account.invoice, id: awi_sale_invoice_11N, view: account.invoice_form}:
        nro_ctrl: 11N-INV-AWI-SALE
        invoice_line: 
          - name: 11N-INV-AWI-SALE
            product_id: product.product_product_4
            quantity: 3
            uos_id: product.product_uom_unit
            price_unit: 3
            account_id: account.a_sale
        <<: *awi_sale_invoice_010
-
  Check that the invoice's type is sale (out_invoice).
-
    !assert {model: account.invoice, id: awi_sale_invoice_11N, string: The invoice is not an out_invoice}:
        - type == 'out_invoice'
-
  Add a withholding line (invoice) to the withholding iva doc.
-
  !python {model: account.wh.iva}: |
    awi_id = ref('awi_sale_11N')
    invoice_id = ref('awi_sale_invoice_11N')
    values = {}
    awi_brw = self.browse(cr, uid, awi_id)
    res = self.onchange_partner_id(
        cr, uid, [awi_id], 'out_invoice', awi_brw.partner_id.id)
    values['wh_lines'] = [
        (0, 0, {'invoice_id': invoice_id,
                'name':'N/A',
                'wh_iva_rate': awi_brw.partner_id.wh_iva_rate})]
    values['account_id'] = res['value']['account_id']
    self.write(cr, uid, awi_id, values)
-
  Check that the withholding line was NOT added to the wh doc.
-
  !python {model: account.wh.iva}: |
    awi_id = ref('awi_sale_11N')
    awi_brw = self.browse(cr, uid, awi_id)
    assert not awi_brw.wh_lines, "A withholding line should not be created. because there is not related tax at the invoice"

-
  3.5 Trying to add Customer B withholding line into a withholding document of Customer A.
-
  Create a withholding document for Customer A.
-
    !record {model: account.wh.iva, id: awi_sale_customer_a, view: l10n_ve_withholding_iva.view_wh_iva_form_customer}:
        number: AWI SALE CUSTOMER A
        name: AWI SALE CUSTOMER A
        partner_id: l10n_ve_fiscal_requirements.f_req_partner_1
        account_id: account.a_recv
        journal_id: account.sales_journal
        company_id: base.main_company
        currency_id: base.EUR
-
  I check that the customer withholding is in draft state.
-
  !assert {model: account.wh.iva, id: awi_sale_customer_a, string: the withholding iva is not in draft state. It needs to be in draft stata when is just created}:
    - state == 'draft'
-
  I check that the customer withholding is out_invoice type.
-
  !assert {model: account.wh.iva, id: awi_sale_customer_a, string: Not the intended type. It should be 'out_invoice'}:
    - type == 'out_invoice'
-
  Search current period and attach to the withholding iva doc.
-
  !python {model: account.wh.iva}: |
    import time
    awi_id = ref("awi_sale_customer_a")
    company_id = ref('base.main_company')
    period_obj = self.pool.get('account.period')
    period = period_obj.find(
        cr, uid, time.strftime('%Y/%m/%d'), {'company_id': company_id})
    assert period, 'There aren\'t periods for this date'
    self.write(cr, uid, awi_id, {'period_id':period[0]})
-
  Create an invoice for the Customer B with ret tax.
-
    !record {model: account.invoice, id: awi_sale_invoice_customer_b, view: account.invoice_form}:
        nro_ctrl: AWI SALE INV CUSTOMER B
        partner_id: l10n_ve_fiscal_requirements.f_req_partner_7
        invoice_line:
          - name: AWI SALE INV CUSTOMER B
            product_id: product.product_product_4
            quantity: 3
            uos_id: product.product_uom_unit
            price_unit: 3
            account_id: account.a_sale
            invoice_line_tax_id:
              - l10n_ve_fiscal_requirements.iva_sale1
        <<: *awi_sale_invoice_010
-
  Check that the invoice's type is sale (out_invoice).
-
    !assert {model: account.invoice, id: awi_sale_invoice_customer_b, string: The invoice is not an out_invoice}:
        - type == 'out_invoice'
-
  Trying to add a withholding line (invoice) of Customer B into a withholding iva doc of Customer A. It does not add the line.
-
  !python {model: account.wh.iva}: |
    awi_id = ref('awi_sale_customer_a')
    invoice_id = ref('awi_sale_invoice_customer_b')
    values = {}
    awi_brw = self.browse(cr, uid, awi_id)
    res = self.onchange_partner_id(
        cr, uid, [awi_id], 'out_invoice', awi_brw.partner_id.id)
    values['wh_lines'] = [
        (0, 0, {'invoice_id': invoice_id,
                'name':'N/A',
                'wh_iva_rate': awi_brw.partner_id.wh_iva_rate})]
    values['account_id'] = res['value']['account_id']
    
    try:
        write_flag = self.write(cr, uid, awi_id, values)
    except Exception as e:
        write_flag = -1
        pass
    assert write_flag == -1, 'A withholding line should not be created. Can not add a withholding line from Customer B into a withholding document of Customer A.'

-
  3.6 Add the same invoice for two differents withholding docs.
-
  Create an invoice for the Customer A with ret tax.
-
    !record {model: account.invoice, id: awi_sale_invoice_repeat_customer_a, view: account.invoice_form}:
        nro_ctrl: AWI SALE INV CUSTOMER A
        partner_id: l10n_ve_fiscal_requirements.f_req_partner_1
        invoice_line:
          - name: AWI SALE INV CUSTOMER A
            product_id: product.product_product_4
            quantity: 3
            uos_id: product.product_uom_unit
            price_unit: 3
            account_id: account.a_sale
            invoice_line_tax_id:
              - l10n_ve_fiscal_requirements.iva_sale1
        <<: *awi_sale_invoice_010
-
  Check that the invoice's type is sale (out_invoice).
-
    !assert {model: account.invoice, id: awi_sale_invoice_repeat_customer_a, string: The invoice is not an out_invoice}:
        - type == 'out_invoice'
-
  Create a withholding document for Customer A.
-
    !record {model: account.wh.iva, id: awi_sale_customer_a1, view: l10n_ve_withholding_iva.view_wh_iva_form_customer}:
        number: AWI SALE CUSTOMER A REPEAT AWIL 
        name: AWI SALE CUSTOMER A REPEAT AWIL
        partner_id: l10n_ve_fiscal_requirements.f_req_partner_1
        account_id: account.a_recv
        journal_id: account.sales_journal
        company_id: base.main_company
        currency_id: base.EUR
-
  I check that the customer withholding is in draft state.
-
  !assert {model: account.wh.iva, id: awi_sale_customer_a1, string: the withholding iva is not in draft state. It needs to be in draft stata when is just created}:
    - state == 'draft'
-
  I check that the customer withholding is out_invoice type.
-
  !assert {model: account.wh.iva, id: awi_sale_customer_a1, string: Not the intended type. It should be 'out_invoice'}:
    - type == 'out_invoice'
-
  Search current period and attach to the withholding iva doc.
-
  !python {model: account.wh.iva}: |
    import time
    awi_id = ref("awi_sale_customer_a1")
    company_id = ref('base.main_company')
    period_obj = self.pool.get('account.period')
    period = period_obj.find(
        cr, uid, time.strftime('%Y/%m/%d'), {'company_id': company_id})
    assert period, 'There aren\'t periods for this date'
    self.write(cr, uid, awi_id, {'period_id':period[0]})
-
  Add a withholding line (invoice) to the withholding iva doc.
-
  !python {model: account.wh.iva}: |
    awi_id = ref('awi_sale_customer_a1')
    invoice_id = ref('awi_sale_invoice_repeat_customer_a')
    values = {}
    awi_brw = self.browse(cr, uid, awi_id)
    res = self.onchange_partner_id(
        cr, uid, [awi_id], 'out_invoice', awi_brw.partner_id.id)
    values['wh_lines'] = [
        (0, 0, {'invoice_id': invoice_id,
                'name':'N/A',
                'wh_iva_rate': awi_brw.partner_id.wh_iva_rate})]
    values['account_id'] = res['value']['account_id']
    self.write(cr, uid, awi_id, values)
-
  Check that the withholding line was added to the wh doc.
-
  !python {model: account.wh.iva}: |
    awi_id = ref('awi_sale_customer_a1')
    awi_brw = self.browse(cr, uid, awi_id)
    assert awi_brw.wh_lines, "This wh line was not added to the withholding doc."
-
  Create another withholding document for Customer A.
-
    !record {model: account.wh.iva, id: awi_sale_customer_a2, view: l10n_ve_withholding_iva.view_wh_iva_form_customer}:
        number: AWI SALE CUSTOMER A ANOTHER
        name: AWI SALE CUSTOMER A ANOTHER
        partner_id: l10n_ve_fiscal_requirements.f_req_partner_1
        account_id: account.a_recv
        journal_id: account.sales_journal
        company_id: base.main_company
        currency_id: base.EUR
-
  I check that the customer withholding is in draft state.
-
  !assert {model: account.wh.iva, id: awi_sale_customer_a2, string: the withholding iva is not in draft state. It needs to be in draft stata when is just created}:
    - state == 'draft'
-
  I check that the customer withholding is out_invoice type.
-
  !assert {model: account.wh.iva, id: awi_sale_customer_a2, string: Not the intended type. It should be 'out_invoice'}:
    - type == 'out_invoice'
-
  Search current period and attach to the withholding iva doc.
-
  !python {model: account.wh.iva}: |
    import time
    awi_id = ref("awi_sale_customer_a2")
    company_id = ref('base.main_company')
    period_obj = self.pool.get('account.period')
    period = period_obj.find(
        cr, uid, time.strftime('%Y/%m/%d'), {'company_id': company_id})
    assert period, 'There aren\'t periods for this date'
    self.write(cr, uid, awi_id, {'period_id':period[0]})
-
  Trying to add a withholding line (invoice) to the withholding iva doc when
  this line was already added to another withholding doc. This test is comment
  because it raise a sql constraint that cannot be manage with a python try.
  It works well. If you want to re test this you need to uncomment this test.
#~ -
  #~ !python {model: account.wh.iva}: |
    #~ awi_id = ref('awi_sale_customer_a2')
    #~ invoice_id = ref('awi_sale_invoice_repeat_customer_a')
    #~ values = {}
    #~ awi_brw = self.browse(cr, uid, awi_id)
    #~ res = self.onchange_partner_id(
        #~ cr, uid, [awi_id], 'out_invoice', awi_brw.partner_id.id)
    #~ values['wh_lines'] = [
        #~ (0, 0, {'invoice_id': invoice_id,
                #~ 'name':'N/A',
                #~ 'wh_iva_rate': awi_brw.partner_id.wh_iva_rate})]
    #~ values['account_id'] = res['value']['account_id']
    #~ try:
        #~ self.write(cr, uid, awi_id, values)
        #~ assert False, 'Add invoice was added first in one withholding doc so it can be added into a another withholding doc.'
    #~ except Exception as e:
        #~ print 'Correct peformance, the sql constraint does not permit that the invoice was added to two withholding documents'
        #~ pass
