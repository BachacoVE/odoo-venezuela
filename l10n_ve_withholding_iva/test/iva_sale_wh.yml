-
  In order to test account invoice I create a new customer invoice
-
  !record {model: account.invoice, id: test_sale_iva_ret01}:
    account_id: account.a_recv
    address_contact_id: base.res_partner_address_3
    address_invoice_id: base.res_partner_address_3
    company_id: base.main_company
    currency_id: base.EUR
    date_invoice: !eval time.strftime('%Y-%m-%d')
    invoice_line:
      - product_id: product.product_product_pc3
        quantity: 3
        uos_id: product.product_uom_unit
        price_unit: 10
        name: PC3
        account_id: account.a_sale
        concept_id: l10n_ve_withholding_islr.islr_wh_concept_no_apply_withholding
        invoice_line_tax_id:
        - iva_purchase1
      - product_id: product.product_product_pc2
        quantity: 5
        uos_id: product.product_uom_unit
        price_unit: 20
        name: PC2
        account_id: account.a_sale
        concept_id: l10n_ve_withholding_islr.islr_wh_concept_no_apply_withholding
        invoice_line_tax_id:
        - iva_purchase1
    journal_id: account.sales_journal
    partner_id: base.res_partner_3
    reference_type: none
-
  I check that Initially customer invoice is in the "Draft" state
-
  !assert {model: account.invoice, id: test_sale_iva_ret01}:
    - state == 'draft'
-
  I change the state of invoice to "Proforma2" by clicking PRO-FORMA button
-
  !workflow {model: account.invoice, action: invoice_proforma2, ref: test_sale_iva_ret01}
-
  I check that the invoice state is now "Proforma2"
-
  !assert {model: account.invoice, id: test_sale_iva_ret01}:
    - state == 'proforma2'
-
  I check that there is no move attached to the invoice
-
  !python {model: account.invoice}: |
    acc_id=self.browse(cr, uid, ref("test_sale_iva_ret01"))
    assert (not acc_id.move_id), "Move falsely created at pro-forma"
-
  I create invoice by clicking on Create button
-
  !workflow {model: account.invoice, action: invoice_open, ref: test_sale_iva_ret01}
-
  I check that the invoice state is "Open"
-
  !assert {model: account.invoice, id: test_sale_iva_ret01}:
    - state == 'open'

-
  I check that now there is a move attached to the invoice
-
  !python {model: account.invoice}: |
    acc_id=self.browse(cr, uid, ref("test_sale_iva_ret01"))
    assert acc_id.move_id, "Move not created for open invoice"
-
  I check journal entries for the invoice
-
  !python {model: account.wh.iva}: |
    am_obj=self.pool.get('account.move')
    ai_obj=self.pool.get('account.invoice')
    ai = ai_obj.browse(cr, uid, ref("test_sale_iva_ret01"))
    am_ids = am_obj.search(cr, uid, [('name', '=', ai.number)])
    assert am_ids, 'Not found account move for the document'
    am_brw = am_obj.browse(cr, uid, am_ids[0])
    d = c = 0
    for l in am_brw.line_id:
      if l.account_id.id == ref("account.a_recv"):
        assert l.account_id.debit != 0, 'Account move is wrong for IVA'
        d += l.debit
      else:
        assert l.account_id.credit != 0, 'Account move is wrong for expense'
        c += l.credit
        if l.tax_amount > 0:
          assert l.tax_amount == 15.6, 'Tax is wrong'
    assert c==d, 'Totals must match'

